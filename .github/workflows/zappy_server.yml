name: Zappy Server

on:
  pull_request:
    branches-ignore:
      - feature/ignore**
  push:
    branches-ignore:
      - feature/ignore**
      - feature/gui**

defaults:
  run:
    shell: bash
    working-directory: server

env:
  EXECUTABLE: "zappy_server"

jobs:
  check_cleanliness_repo:
    name: "Check if the repository is clean and void of any unwanted files (temp, files, binary files, etc.)"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Scan files
      run: |
        arr=($(find . \( -name "#*#" -o -name "*~" \
        -o -name "*.o" -o -name "*.a" \
        -o -name "*.gcno" -o -name "*.gcda" -o -name "*.gcov" \
         -o -path '*tmp/*' \)))
        for i in ${arr[@]}; do echo "::error file=$i,line=1,endLine=1,title=Unwanted file detected::$i"; done
        if ((${#arr[@]})); then
          exit 1
        fi

  check_coding_style:
    container: ghcr.io/epitech/coding-style-checker:latest
    needs: check_cleanliness_repo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GH repositories
        uses: actions/checkout@v3
      - name: Run coding-style script
        run: check.sh $(pwd) $(pwd)
      - name: Display banana report
        run: cat coding-style-reports.log
      - name: Report banana result
        run: |
          ERRORS=$(cat coding-style-reports.log | tr " " ":")
          exit_value=0
          for line in $ERRORS; do
            echo $line
            line=$(echo $line | tr ":", " ")
            linearray=($line)
            echo ::error file=${linearray[0]},line=${linearray[1]}, title="${linearray[2]} coding style error"::${linearray[3]}
            exit_value=1
          done
          exit $exit_value

  run_program:
    container:
      image: epitechcontent/epitest-docker:latest
    needs: check_coding_style
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Compilation test
      run: make
      timeout-minutes: 2
    - name: Check executable files exists for server
      run: |
        IFS=',' read -ra ADDR <<< $EXECUTABLES
        for i in "${ADDR[@]}"; do
          if [[ ! -x "./${i}" ]]; then
            exit 1
          fi
        done
    - name: Run tests
      run: make tests_run
      timeout-minutes: 2
    - name: Clean repository
      run: make fclean
